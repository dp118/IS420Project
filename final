
drop table message cascade constraints; 
drop table payment cascade constraints; 
drop table review cascade constraints; 
drop table order_dish cascade constraints; 
drop table orders cascade constraints;
drop table cart_dish cascade constraints;
drop table cart cascade constraints; 
drop table dish cascade constraints;
drop table restaurant_category cascade constraints;
drop table restaurant cascade constraints; 
drop table category cascade constraints; 
drop table salestax cascade constraints; 
drop table customer_discount cascade constraints; 
drop table discount cascade constraints; 
drop table customer cascade constraints; 

-- customer ID, name, address, zip code, state, email, credit 
create table customer
(cid int,
cname varchar(50),
caddress varchar(50),
czip int,
cstate varchar(2),
cemail varchar(50),
credit int,
primary key (cid)
);

-- data insertion for customer
insert into customer
values(1, 'Nancy Regan', '123 main st', 21774, 'MD', 'nancyr@hotmail.com', 0);
insert into customer
values(2, 'Charles Mingus', '1000 hilltop circle', 21250, 'MD', 'charlesm@gmail.com', 25);
insert into customer
values(3, 'Franky Robo', '900 walker ave', 21228, 'MD', 'frankyfrank@gmail.com', 0);

-- discount ID, discount description, discount type (1 means free delivery, 
-- 2 means a fixed percent off the total charge, 3 means a fixed amount off the total charge (say $20)), and discount amount
create table discount
(did int,
description varchar(100),
dtype int
    check (dtype in (1,2,3)), -- 1 means free delivery, 2 means a fixed percent off the total charge, 3 means a fixed amount off the total charge
damount int,
primary key (did)
);

-- data insertion for discount
insert into discount
values(1, 'Half off coupon', 2, 0.5);
insert into discount
values(2, 'Free delivery coupon', 1, null);
insert into discount
values(3, '5 dollars off coupon', 3, 5);

create table customer_discount
(cid int,
did int,
startdate date,
enddate date,
damount int,
primary key (cid, did),
foreign key (cid) references customer(cid),
foreign key (did) references discount(did)
);

-- data insertion customer discount
insert into customer_discount
values(1, 1, DATE '2023-2-14', DATE '2023-2-28', 2);
insert into customer_discount
values(2, 2, DATE '2023-3-7', DATE '2023-3-14', 1);
insert into customer_discount
values(3, 3, DATE '2023-1-1', DATE '2023-1-31', 3);

-- tax rate : state, rate
create table salestax
(state varchar(2),
taxrate int
);

-- data insertion for sales tax
insert into salestax
values('MD', 0.06);
insert into salestax
values('VT', 0.05);
insert into salestax
values('DE', 0);

-- category ID, category name
create table category
(catid int,
catname varchar(25),
primary key (catid)
);

-- data insertion category
insert into category
values(1, 'fast food');
insert into category
values(2, 'Mexican');
insert into category
values(3, 'Italian');

-- restaurant ID, restaurant name, address, phone number, 
--current status (open or closed), zip code, state, average wait time, and average review score
create table restaurant
(rid int,
rname varchar(50),
raddress varchar(50),
rnumber varchar(10),
rzip int,
rstatus varchar (10),
rstate varchar(2),
avgwaittime int,
avgreviewscore float,
primary key (rid)
);

-- data insertion for restaurant
insert into restaurant
values(1, 'Burger King', '5549 burger dr', '3014958956', 25987, 'open', 'MD', 5, 3);
insert into restaurant
values(2, 'Cava', '1022 keyway cir', '4439866758', 22222, 'open', 'PA', 5, 4);
insert into restaurant
values(3, 'Bonchon', '1234 chicken way','2405564849' , 54312, 'open', 'WV', 3, 4);

-- The system stores the categories for each restaurant.
create table restaurant_category
(rid int,
catid int,
primary key (rid, catid),
foreign key (rid) references restaurant(rid),
foreign key (catid) references category(catid)
);

-- data insertion for restaurant category
insert into restaurant_category
values(1, 1);
insert into restaurant_category
values(2, 2);
insert into restaurant_category
values(3, 3);

-- Each restaurant has a number of dishes. Each dish has a dish ID, restaurant ID, dish name, price. 
create table dish
(dishid int,
rid int,
dishname varchar(50),
dishprice int,
primary key (dishid),
foreign key (rid) references restaurant (rid)
);

-- data insertion for dish
insert into dish
values(1, 1, 'Whopper', 5);
insert into dish
values(2, 2, 'Grains Bowl', 12);
insert into dish
values(3, 3, '4-Piece Fried Chicken', 10);

-- add one or more dishes a shopping cart. The cart table has cart id, customer id, restaurant id
create table cart
(cartid int,
cid int,
rid int,
primary key (cartid),
foreign key (cid) references customer(cid),
foreign key (rid) references restaurant(rid)
);

-- data insertion for cart
insert into cart
values(1, 1, 1);
insert into cart
values(2, 2, 2);
insert into cart
values(3, 3, 3);

-- stores information about dishes put in a cart.
-- same dish can also appear multiple times in the same cart so you can use a quantity column
create table cart_dish
(cartid int,
dishid int,
cdquantity int,
primary key (cartid, dishid),
foreign key (cartid) references cart(cartid),
foreign key (dishid) references dish(dishid)
);

-- data insertion for cart dish
insert into cart_dish
values(1,1,2);
insert into cart_dish
values(2,2,1);
insert into cart_dish
values(3,3,1);

-- order has order ID, customer ID, restaurant ID, order time (time order placed), delivery time (null if not  delivered yet), estimated time it is ready, 
-- status (in progress, delivered or canceled), payment status (paid or not paid), total cost. The order also contains a flag indicating delivery method (1 is delivery, 2 as pickup)
create table orders
(oid int,
cid int,
rid int,
ordertime timestamp,
deliverytime timestamp,
estimatedtime timestamp,
status varchar(20)
    check (status in ('in progress', 'delivered', 'canceled')),
paymentstatus varchar(20)
    check (paymentstatus in ('paid', 'not paid')),
totalcost int,
deliverymethod int
    check (deliverymethod in (1,2)),
primary key (oid),
foreign key (cid) references customer(cid),
foreign key (rid) references restaurant(rid)
);

-- data insertion for orders
insert into orders
values(1, 1, 1, timestamp '2023-3-8 13:10:15', timestamp '2023-03-08 03:16:15', timestamp '2023-3-8 03:15:00', 'delivered', 'paid', 10, 2);
insert into orders
values(2, 2, 2, timestamp '2023-3-8 13:29:35', null, timestamp '2023-3-8 03:45:00', 'in progress', 'not paid', 12, 1);
insert into orders
values(3, 3, 3, timestamp '2023-3-8 13:00:55', null, timestamp '2023-3-8 13:15:00', 'canceled', 'not paid', 10, 2);

--store dishes in an order, including order id and dish id.
create table order_dish
(oid int,
dishid int,
odquantity int,
primary key (oid,dishid),
foreign key (oid) references orders(oid),
foreign key (dishid) references dish(dishid)
);

-- data insertion for order dish
insert into order_dish
values(1, 1, 2);
insert into order_dish
values(2, 2, 1);
insert into order_dish
values(3, 3, 1);

-- Each customer can leave reviews for a restaurant, 
-- including review ID, customer ID, restaurant ID, review date, review score, comments. 
create table review
(revid int,
cid int,
rid int,
revdate date,
revscore float,
comments varchar(100),
primary key (revid),
foreign key (cid) references customer(cid),
foreign key (rid) references restaurant(rid)
);

-- data insertion for review
insert into review
values(1, 1, 1, date '2022-03-09', 3, 'Food was quick, but location was a bit messy');
insert into review
values(2, 2, 2, date '2022-03-10', 4.5, 'Food and service was good. A bit pricey.');
insert into review
values(3, 3, 3, date '2022-03-15', 5, 'Everything was great');

--The order also contains payment record for a customer, including payment ID, customer ID, payment time, order ID, 
--payment amount, payment method (only contains whether it is credit/debit card, apple pay, or paypal)
create table payment
(pid int,
cid int,
ptime timestamp,
oid int,
pamount int,
pmethod varchar(25)
    check (pmethod in ('credit/debit card', 'apple pay', 'paypal')),
primary key (pid),
foreign key (cid) references customer(cid),
foreign key (oid) references orders(oid)
);

-- data insertion for payment
insert into payment
values(1, 1, timestamp '2023-03-08 13:10:15', 1, 10, 'paypal');
insert into payment
values(2, 2, null, 2, 12, null);
insert into payment
values(3, 3, null, 1, 10, null);

-- message table which contains message ID, customer ID, message time, and message body
create table message
(mid int,
cid int,
mtime timestamp,
mbody varchar(100),
primary key (mid),
foreign key (cid) references customer(cid)
);

-- data insertion for message
insert into message
values(1, 1, timestamp '2023-03-08 13:10:15', 'No mayo on either sandwich please');
insert into message
values(2, 2, timestamp '2023-03-08 13:29:35', 'Extra pita please');
insert into message
values(3, 3, timestamp '2023-03-08 13:00:55', '2 extra sauce packets please');

-- sequences
drop sequence cid_seq;
-- sequence for new customers, for feature 1
create sequence cid_seq START WITH 4;
drop sequence mid_seq;
-- sequence for new messages, for feature 7
create sequence mid_seq START WITH 4;
drop sequence pid_seq;
-- sequence for new payments, for feature 7
create sequence pid_seq START WITH 4;
drop sequence revid_seq;
-- sequence for new review for feature 8
create sequence revid_seq START WITH 4;


--Feature 1 - Yen

create or replace procedure NewCustomer(v_name in varchar2, v_address in varchar2, 
    v_zip in int, v_state in varchar2, v_email in varchar2)
as
v_count int;
v_cid int;
begin
    -- checks for existing client with email
    select count(*) into v_count from customer where cemail = v_email; 
    if v_count = 1 then 
    dbms_output.put_line('The client already exists');
    -- update client data: address, state, and zip
    update customer
    set caddress = v_address, cstate = v_state, czip = v_zip
    where cemail = v_email;
    else
    -- create new client, credit is 0
    v_cid := cid_seq.nextval;
    insert into customer values (v_cid, v_name, v_address, v_zip, v_state, v_email, 0);
    dbms_output.put_line('The customer id is ' || v_cid);
    end if;
end;
/
--Testing Regular Case:
exec NewCustomer( 'Derrick Brown', '123 Admiral Lane', 21765, 'MD', 'derrickb@hotmail.com');

--Testing Existing case:
--Adding same customer twice, but needs to update address
exec NewCustomer( 'Derrick Brown', '123 Corporal Road', 21766, 'MD', 'derrickb@hotmail.com');
--Feature 2 - Michael
-- Feature 2
-- Given a customer email, first check if there is a customer with that email.
-- If not print a message “no such customer.”
-- Otherwise print out the profile of the customer, including name, address, state, zip code, email, credit,
-- total number of orders with status 2 (delivered) in the last six months
-- and total amount spent (sum of total cost for orders with status 2) in the last six months.

create or replace procedure verify_customer(email_id IN varchar)
AS
c_count int;
o_count int;
o_sum number;
c_email customer.cemail%type;
c_name customer.cname%type;
c_address customer.caddress%type;
c_state customer.cstate%type;
c_zip customer.czip%type;
c_credit customer.credit%type;


BEGIN
	-- verify valid email
	SELECT COUNT(*) INTO c_count
	FROM customer WHERE cemail = email_id;
    	IF c_count = 0 THEN
        	dbms_output.put_line('No such customer');
    	ELSE
        	SELECT cemail, cname, caddress, cstate, czip, credit
        	INTO c_email, c_name, c_address, c_state, c_zip, c_credit
        	FROM customer           	 
            	WHERE cemail = email_id;
           	 
	-- find orders in last 6 months
        	SELECT COUNT(*) INTO o_count
        	FROM orders, customer
            	WHERE customer.cid = orders.cid
            	AND cemail = email_id
            	AND status = 'delivered'
            	AND ordertime > SYSDATE - INTERVAL '6' MONTH;
           	 
	-- calculate sum of order costs in last 6 months
        	SELECT SUM(totalcost) INTO o_sum
        	FROM orders, customer
            	WHERE customer.cid = orders.cid
            	AND cemail = email_id
            	AND status = 'delivered'
            	AND ordertime > SYSDATE - INTERVAL '6' MONTH;
           	 
                	dbms_output.put_line('Name: ' || c_name);
                	dbms_output.put_line('Address: ' || c_address);
                	dbms_output.put_line('State: ' || c_state);
                	dbms_output.put_line('Zip: ' || c_zip);
                	dbms_output.put_line('Email: ' || c_email);
                	dbms_output.put_line('Credit: ' || c_credit);  
                	dbms_output.put_line('Orders in last 6 months: ' || o_count);    
                	dbms_output.put_line('Total cost of orders in last 6 months: $' || o_sum);

    	END IF;

END;
/
-- regular use case
exec verify_customer('nancyr@hotmail.com');

-- invalid customer email
exec verify_customer('customer');
--Feature 3 - Sabrina

CREATE OR REPLACE PROCEDURE search_restaurant_by_category(input_category IN VARCHAR) AS
name restaurant.rname%TYPE;

review_score restaurant.avgreviewscore%TYPE;
wait_time restaurant.avgwaittime%TYPE;
zip_code restaurant.rzip%TYPE;

BEGIN

    FOR r IN (
        SELECT rname, AVG(revscore) AS review_score, AVG(avgwaittime) AS wait_time, rzip
        FROM restaurant
        JOIN restaurant_category on restaurant.rid = restaurant_category.rid
        JOIN category on restaurant_category.catid = category.catid
        LEFT JOIN review on restaurant.rid = review.rid
        WHERE rstatus = 'open' AND UPPER(catname) LIKE UPPER('%'||input_category||'%')
        GROUP BY rname, rzip) 
    
    LOOP
        name := r.rname;
        review_score := r.review_score;
        wait_time := r.wait_time;
        zip_code := r.rzip;
        DBMS_OUTPUT.PUT_LINE('Name: '||name||', Average review score: '||review_score||', Average wait time: '||wait_time||', Zip code: '||zip_code);
    END LOOP;

END;
/
-- searches restaurants in fastfood category
EXEC search_restaurant_by_category('fast');
-- searches restaurants in italian category
EXEC search_restaurant_by_category('italian'); 
-- searches restaurants in mexican category
EXEC search_restaurant_by_category('mexican'); 

--Feature 4 - Parth
CREATE OR REPLACE FUNCTION restmenu(restaurant_id IN restaurant.rid%TYPE) RETURN VARCHAR2
IS
  restaurant_name restaurant.rname%TYPE;
  dish_name dish.dishname%TYPE;
  price dish.dishprice%TYPE;
  output VARCHAR2 (10000) := '';
BEGIN
  
  --Part 1: Checking if restaurant exists
  BEGIN
    SELECT rname INTO restaurant_name FROM restaurant WHERE rid = restaurant_id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'No such restaurant';
  END;

  --Part 2: Listing dishes from specified restaurant
  FOR dish IN (SELECT dishname, dishprice FROM dish WHERE rid = restaurant_id) LOOP
    dish_name := dish.dishname;
    price := dish.dishprice;
    output := output || dish_name || ' - $' || price || CHR(10);
  END LOOP;

  RETURN output;
END;
/

--Invalid execution
EXEC DBMS_OUTPUT.PUT_LINE(restmenu(10));

--Valid execution
EXEC DBMS_OUTPUT.PUT_LINE(restmenu(2));


--Feature 5 - Olisa

CREATE OR REPLACE FUNCTION lu_cart(p_cartid IN cart.cartid%TYPE)
    RETURN VARCHAR2
IS
    v_output VARCHAR2(4000) := '';
BEGIN
    SELECT 'Dish Name: ' || d.dishname || ', Dish Price: ' || d.dishprice || ', Quantity: ' || cd.cdquantity
    INTO v_output
    FROM cart_dish cd
    JOIN dish d ON cd.dishid = d.dishid
    WHERE cd.cartid = p_cartid;

    RETURN v_output;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Invalid cart id';
END;
/
--Test Cases:
--Regular Case:
Exec dbms_output.put_line(lu_cart(1));

--Invalid Case:
Exec dbms_output.put_line(lu_cart(10));

--Feature 6 - Michael
-- Feature 6
-- Remove a dish from shopping cart. Input includes dish ID and cart ID.
-- First check whether the cart with the given ID has that dish. If not print a message 'Invalid input'.
-- If the input ID is valid, check the quantity of that dish.
-- If it is more than one, then reduce the quantity of that dish from the cart and print a message saying ‘quantity reduced’.
-- If the quantity is one, delete that row from the cart and print out 'dish removed'.


create or replace procedure remove_dish(dish_id in number, cart_id in number)
AS
dish_count number;
dish_quan number;
cart_count number;

begin
	SELECT COUNT(*) INTO dish_count
	FROM cart_dish
	WHERE dishid = dish_id
	AND cartid = cart_id;
    
    
    	-- verify dish exists in cart
	if dish_count < 1 then
    	dbms_output.put_line('Invalid dish input.');
    	return;
	end if;
    
	SELECT cdquantity INTO dish_quan
	FROM cart_dish
	WHERE dishid = dish_id;

	-- reduce quantity where many dishes are in cart
	if dish_quan > 1 then
    	UPDATE cart_dish set
    	cdquantity = cdquantity - 1
    	WHERE dishid = dish_id
    	AND cartid = cart_id;
    	dbms_output.put_line('Quantity reduced.');
	end if;

	-- remove dish if only one dish is in cart
	if dish_quan = 1 then
    	DELETE FROM cart_dish  
    	WHERE dishid = dish_id
    	AND cartid = cart_id;
    	dbms_output.put_line('Dish removed.');
	end if;

end;
/
-- reduce quantity
exec remove_dish(1, 1);

-- remove dish
exec remove_dish(2, 2);

-- invalid dish
exec remove_dish(41, 1);


--Feature 7 - Parth
CREATE OR REPLACE FUNCTION update_order_status(order_id INT, new_status INT, input_time TIMESTAMP) RETURN VARCHAR AS
    order_status VARCHAR(20);
BEGIN
    begin
    -- Check if the order ID is valid
    SELECT status INTO order_status FROM orders WHERE oid = order_id;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'Invalid Order ID';
    end;
    -- Update the status of the order
    UPDATE orders SET status = CASE new_status
                               WHEN 1 THEN 'in progress'
                               WHEN 2 THEN 'delivered'
                               WHEN 3 THEN 'canceled'
                               ELSE status
                               END
    WHERE oid = order_id;

    -- Handle additional actions based on the new status
    
    IF new_status = 2 THEN
        -- Insert a message for delivered order
        INSERT INTO message (mid, cid, mtime, mbody)
        VALUES (mid_seq.nextval, (SELECT cid FROM orders WHERE oid = order_id), input_time, 'Your order ' || order_id || ' has been delivered!');
    ELSIF new_status = 3 THEN
        -- Insert a message for canceled order
        INSERT INTO message (mid, cid, mtime, mbody)
        VALUES (mid_seq.nextval, (SELECT cid FROM orders WHERE oid = order_id), input_time, 'Your order ' || order_id || ' has been canceled and refund issued!');

        -- Insert a refund payment record
        INSERT INTO payment (pid, cid, ptime, oid, pamount, pmethod)
        VALUES (pid_seq.nextval, (SELECT cid FROM orders WHERE oid = order_id), input_time, order_id, -(SELECT totalcost FROM orders WHERE oid = order_id), (SELECT pmethod FROM payment WHERE oid = order_id));
    END IF;

    RETURN 'Order status updated successfully';
END;
/
-- invalid case
exec DBMS_OUTPUT.PUT_LINE(update_order_status(10, 2, TIMESTAMP '2023-03-08 13:10:15'));
-- valid case
select * from orders;
--changes status of order 2 from in progress to delivered
exec DBMS_OUTPUT.PUT_LINE(update_order_status(2, 2, TIMESTAMP '2023-03-08 13:10:15'));
select * from orders;
select * from message;


-- Feature 8 - Yen
create or replace procedure NewCustomer(v_name in varchar2, v_address in varchar2, 
    v_zip in int, v_state in varchar2, v_email in varchar2)
as
v_count int;
v_cid int;
begin
    -- checks for existing client with email
    select count(*) into v_count from customer where cemail = v_email; 
    if v_count = 1 then 
    dbms_output.put_line('The client already exists');
    -- update client data: address, state, and zip
    update customer
    set caddress = v_address, cstate = v_state, czip = v_zip
    where cemail = v_email;
    else
    -- create new client, credit is 0
    v_cid := cid_seq.nextval;
    insert into customer values (v_cid, v_name, v_address, v_zip, v_state, v_email, 0);
    dbms_output.put_line('The customer id is ' || v_cid);
    end if;
end;
/

--Testing Regular Case:
exec NewCustomer( 'Derrick Brown', '123 Admiral Lane', 21765, 'MD', 'derrickb@hotmail.com');
select * from customer;
--Testing Existing case:
--Adding same customer twice, but needs to update address
exec NewCustomer( 'Derrick Brown', '123 Corporal Road', 21766, 'MD', 'derrickb@hotmail.com');
select * from customer;

--Feature 9 - Olisa
CREATE OR REPLACE FUNCTION display_reviews(p_restaurant_id IN restaurant.rid%TYPE)
    RETURN VARCHAR2
IS
    v_count NUMBER;
    v_output VARCHAR2(4000) := '';
BEGIN
    -- check if restaurant ID exists
    SELECT COUNT(*) INTO v_count FROM restaurant WHERE rid = p_restaurant_id;
    IF v_count = 0 THEN
        RETURN 'Invalid restaurant id';
    END IF;

    -- retrieve reviews for the restaurant
    FOR r IN (
        SELECT revdate, revscore, comments
        FROM review
        WHERE rid = p_restaurant_id
    ) LOOP
        v_output := v_output || 'Review Date: ' || r.revdate || ', Score: ' || r.revscore || ', Comment: ' || r.comments || CHR(10);
    END LOOP;
    
    RETURN v_output;
END;

/
--regular case
EXEC dbms_output.put_line(display_reviews(1));

--invalid case
EXEC dbms_output.put_line(display_reviews(10));


--Feature 10 - Sabrina
--Feature 10
--Add a dish to shopping cart. Input includes customer ID, restaurant ID, and a dish ID. 
--procedure to add a dish to shopping cart

create or replace procedure add_dish_to_cart (
    p_cid in customer.cid%type,
    p_rid in restaurant.rid%type,
    p_dishid in dish.dishid%type
)
is
    v_cartid cart.cartid%type;
begin
    -- check if customer and restaurant exist
    select cartid into v_cartid
    from cart
    where cid = p_cid and rid = p_rid;
    
    -- insert dish into cart_dish table
    insert into cart_dish values (v_cartid, p_dishid, 1);
    
    dbms_output.put_line('Dish added to cart successfully!');
    
    
exception
    -- handle exceptions for non-existent customer or restaurant
    when no_data_found then
        dbms_output.put_line('Customer or Restaurant not found!');
    
end;
/
-- Example usage of the procedure
-- adds the dish with dishid 2 to the cart of customer with cid 1 and restaurant with rid 1.
exec add_dish_to_cart(1, 1, 2); 
-- invalid case
exec add_dish_to_cart(10, 1, 2); 
